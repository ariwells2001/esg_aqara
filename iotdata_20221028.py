# -*- coding: utf-8 -*-
"""iotdata_20221028.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10d06dtjns8RgRvRHS2kod6-28fMThYaC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive 

data_file_path = '/content/drive/MyDrive/Colab Notebooks/iotdata_csvfiles/'
colnames = ['id','code','created_at','updated_at','email','device_name','value','subject_id','timestamp','resource_id',"device_id",'blank1',"log_time","blank2"]
data = pd.read_csv(data_file_path + 'myiot.csv',header=None,names=colnames)

data.info()

data['device_name'].unique()

data.head()

data.drop(["id","code"],axis=1,inplace=True)

def dummySplit(x):
 
  if x['device_name'] == '온도센서' or x['device_name']=="습도센서":
    value = x['value'][10:]
  else:
    value = x['value'][13:-2]

  return value

data['value']=data.apply(dummySplit,axis=1)

data[data["device_name"]=="스마트큐브"]['value'].unique()

data['device_name'].unique()

data.info()

def subjectIdSplit(x):
 
  value = x['subject_id'][18:-2]

  return value

data['subject_id']=data.apply(subjectIdSplit,axis=1)

def timestampSplit(x):
 
  value = x['timestamp'][15:]

  return value

data['timestamp']=data.apply(timestampSplit,axis=1)

def resourceIdSplit(x):
 
  value = x['resource_id'][19:-4]

  return value

data['resource_id']=data.apply(resourceIdSplit,axis=1)

data.drop(['blank1','blank2'],axis=1,inplace=True)

data.info()

data.tail()

data.drop(['email','resource_id','device_id'],axis=1,inplace=True)

data.info()

def nameConvert(x):

  new_name = ""
  if x['device_name'] == '모션센서':
    new_name = 'motion'
  elif x['device_name'] == '스마트조명 상단':
    new_name = 'lighting_upper'
  elif x['device_name'] == '스마트조명 하단':
    new_name = 'lighting_lower'
  elif x['device_name'] == '스마트큐브':
    new_name = 'cube'
  elif x['device_name'] == '습도센서':
    new_name = 'humidity'
  elif x['device_name'] == '열림감지센서':
    new_name = 'door'
  elif x['device_name'] == '온도센서':
    new_name = 'temperature'
  elif x['device_name'] == '재실존재':
    new_name = 'existence'
  elif x['device_name'] == '전동블라인드':
    new_name = 'rollershade' 
  elif x['device_name'] == '조도센서':
    new_name = 'illuminance'
  elif x['device_name'] == '플러그':
    new_name = 'plug'
  
  return new_name

data['device_name']=data.apply(nameConvert,axis=1)

data['2022-08-15' < data['log_time'] ]

data['log_time'].nunique()

temperature = data[data['device_name']=="temperature"]['value'].astype(float)
temperature.name = 'temperature'
sns.displot(data=temperature,bins=20,kde=True)
temperature.head()

humidity = data[data['device_name']=="humidity"]['value'].astype(float)
humidity.name = 'humidity'
sns.displot(data=humidity,bins=10,kde=True)

motion = data[data['device_name']=="motion"]['value']
motion.name = 'motion'
sns.countplot(motion)

from datetime import datetime
def time_convert(x):
  timestamp = x['timestamp']
  converted_date = datetime.fromtimestamp(timestamp/1000)
  # print(converted_date)
  return converted_date



plug_value = data[data['device_name']=="plug"]['value'].astype(int)
# data[data['device_name']=='plug']['timestamp'] = data[data['device_name']=="plug"]['timestamp'].astype(int)
subset_data = data[data['device_name']=='plug']
subset_data['timestamp'] = subset_data['timestamp'].astype(int)

plug_timestamp = subset_data.apply(time_convert,axis=1)
plug_timestamp = pd.Series(plug_timestamp)
plug_value.name = 'plug_value'
plug_timestamp.name = "plug_timestamp"


df_plug = pd.concat([plug_timestamp,plug_value],axis=1)

plt.subplot(1,2,1)
sns.boxplot(x='plug_timestamp', y="plug_value",data=df_plug)

plt.subplot(1,2,2)
sns.displot(data=df_plug,x = "plug_value",  kde=True)

# print(type(k))
# data['timestamp'] =k
# data['timestamp']=data['timestamp'].astype(int)
# data[data['device_name']=='plug']['timestamp'] = k

data.isnull().sum()

motion = data[data['device_name']=="humidity"]['value'].astype(float)
humidity.name = 'humidity'
sns.displot(data=humidity,bins=10,kde=True)

data

"""# **One-hot Encoding**"""

data = pd.get_dummies(data, columns=['device_name'],drop_first=False)

data

# import numpy as np

# deviceList = ['device_name_cube', 'device_name_door','device_name_existence','device_name_humidity','device_name_illuminance','device_name_lighting_lower',
#               'device_name_lighting_upper','device_name_motion','device_name_plug','device_name_rollershade','device_name_temperature']
# for deviceName in deviceList:
#   naMaker = np.array(data[deviceName])
#   data[deviceName] = np.where(naMaker ==0, None, naMaker)

deviceList = ['device_name_cube', 'device_name_door','device_name_existence','device_name_humidity','device_name_illuminance','device_name_lighting_lower',
              'device_name_lighting_upper','device_name_motion','device_name_plug','device_name_rollershade','device_name_temperature']
for deviceName in deviceList:
  naMaker = np.array(data[deviceName])
  data[deviceName] = np.where(naMaker ==0, None, naMaker*data['value'])

data.head()

pd.get_option("display.max_columns")
data.head()

data.drop('device_name_cube', axis=1, inplace=True)

# data.fillna(method="bfill", limit=1000, inplace=True)
data.fillna(method="ffill", limit=1000,inplace=True)

deviceList = ['device_name_door','device_name_existence','device_name_humidity','device_name_illuminance','device_name_lighting_lower',
              'device_name_lighting_upper','device_name_motion','device_name_plug','device_name_rollershade','device_name_temperature']
for deviceName in deviceList:
  for notNullLocation in range(len(data)):
    temp = data[deviceName].isnull()[notNullLocation]
    if temp == False:
      print(f"{deviceName}:{data[deviceName][notNullLocation]}")
      if data[deviceName][notNullLocation] == '0':
        data[deviceName][0] = str(1)
      elif data[deviceName][notNullLocation] == '1':
        data[deviceName][0] = str(0)
      else:
        if deviceName == "device_name_illuminance":
          data[deviceName][0] = str(int(data[deviceName][notNullLocation]) + 1)
        else:
          data[deviceName][0] = str(float(data[deviceName][notNullLocation]) + 1)

      break

data.fillna(method="ffill", limit=1000,inplace=True)

from datetime import datetime
def time_convert(x):
  timestamp = x['timestamp']
  converted_date = datetime.fromtimestamp(int(timestamp)/1000)
  # print(converted_date)
  return converted_date


data['device_name_temperature']= data['device_name_temperature'].astype(float)
data['device_name_humidity']= data['device_name_humidity'].astype(float)
data['device_name_illuminance']= data['device_name_illuminance'].astype(int)
data['datetime'] = data.apply(time_convert, axis=1)

data.info()

data.isnull().sum()

data = data.drop(['log_time','created_at','updated_at','value','subject_id','timestamp'],axis=1)

data

data['log_hour'] = int(0)
for step in range(len(data)):
  data['log_hour'][step] = data['datetime'][step].hour

data.info()

data

sns.pairplot(data)

sns.boxplot(data=data,x='log_hour', y='device_name_door')

sns.scatterplot(data=data, x='datetime',y='device_name_lighting_lower')

sns.lineplot(data=data, x='datetime',y='device_name_humidity')



sns.lineplot(data=data, x='device_name_temperature',y='device_name_humidity')

data.groupby('log_hour')['device_name_door'].value_counts()

data.groupby('log_hour')['device_name_plug'].value_counts()

data.groupby('log_hour')['device_name_lighting_lower'].value_counts()

data.groupby('log_hour')['device_name_lighting_upper'].value_counts()

data.groupby('log_hour')['device_name_existence'].value_counts()

data.groupby('log_hour')['device_name_motion'].value_counts()

data.to_csv("preprocessed_myiot.csv")